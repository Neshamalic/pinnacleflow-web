// src/utils/format.js

// Devuelve locale a usar según idioma de la app
export const localeFromLang = (lang) => (lang === 'es' ? 'es-CL' : 'en-US');

/**
 * Formatea fechas provenientes de distintas fuentes:
 * - "Date(YYYY,MM,DD)" (con o sin espacios extra)
 * - "dd/mm/yyyy"
 * - ISO / timestamp / cualquier formato que Date entienda
 * Si no puede parsear, devuelve el valor original.
 */
export const fmtDate = (value, lang = 'en') => {
  if (value === null || value === undefined || value === '') return '-';
  const s = String(value).trim();

  // Date(YYYY,MM,DD) con o sin basura extra
  const m = s.match(/Date\s*\(\s*(\d{4})\s*,\s*(\d{1,2})\s*,\s*(\d{1,2}).*?\)/i);
  if (m) {
    const y = +m[1];
    const mo = +m[2]; // 1..12
    const d = +m[3];
    const dt = new Date(y, mo - 1, d);
    return new Intl.DateTimeFormat(localeFromLang(lang), {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }).format(dt);
  }

  // dd/mm/yyyy
  const m2 = s.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})$/);
  if (m2) {
    const d = +m2[1], mo = +m2[2], y = +m2[3];
    const dt = new Date(y, mo - 1, d);
    return new Intl.DateTimeFormat(localeFromLang(lang), {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }).format(dt);
  }

  // ISO / timestamp u otros formatos que JS entienda
  const dt = new Date(s);
  if (!isNaN(dt)) {
    return new Intl.DateTimeFormat(localeFromLang(lang), {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    }).format(dt);
  }

  // Si nada calza, devuelve tal cual
  return s;
};

// Números con separador de miles
export const fmtInt = (n, lang = 'en') =>
  new Intl.NumberFormat(localeFromLang(lang)).format(Number(n) || 0);

// Moneda con separador y símbolo (ej: CLP, USD)
export const fmtCurrency = (n, currency = 'USD', lang = 'en') =>
  new Intl.NumberFormat(localeFromLang(lang), {
    style: 'currency',
    currency
  }).format(Number(n) || 0);
